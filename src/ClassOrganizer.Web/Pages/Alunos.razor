@page "/"
@inject HttpClient Http
@inject IJSRuntime JS
@using ClassOrganizer.Application.DTO
@using ClassOrganizer.Web.ViewModels
@using NetcodeHub.Packages.Components.Modal

<PageTitle>Alunos</PageTitle>

<h1>Alunos</h1>

@if (ErrorMessages != null && ErrorMessages.Any() && !IsOpen)
{
    <div class="alert alert-danger" role="alert">
        <ul>
            @foreach (var error in ErrorMessages)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<button class="btn btn-primary mb-5 mt-2" @onclick="OpenModal">Criar</button>

<Modal Actions="HandleAction" BootstrapClass="border-0" CustomStyle="width:600px; heigth: 700px" @bind-Open="IsOpen">
    <ContentContent>
        <div class="modal-header d-flex justify-content-center">
            <h3 class="modal-title" id="createAlunoModalLabel">Aluno</h3>
        </div>
        @if (ErrorMessages != null && ErrorMessages.Any())
        {
            <div class="alert alert-danger" role="alert">
                <ul>
                    @foreach (var error in ErrorMessages)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }
        <div class="modal-body">
            <EditForm Model="@Aluno" OnValidSubmit="HandleActionSave">
                <DataAnnotationsValidator />

                <div class="form-group mb-4">
                    <label for="nome">Nome</label>
                    <InputText id="nome" class="form-control" @bind-Value="Aluno.Nome" />
                    <ValidationMessage For="@(() => Aluno.Nome)" />
                </div>

                <div class="form-group mb-4">
                    <label for="usuario">Usuário</label>
                    <InputText id="usuario" class="form-control" @bind-Value="Aluno.Usuario" />
                    <ValidationMessage For="@(() => Aluno.Usuario)" />
                </div>

                <div class="form-group mb-5">
                    <label for="senha">Senha</label>
                    <InputText id="senha" type="password" class="form-control" @bind-Value="Aluno.Senha"/>
                    <ValidationMessage For="@(() => Aluno.Senha)" />
                </div>

                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary mx-2" value="salvar">Salvar</button>
                    <button class="btn btn-danger mx-2" value="cancelar" @onclick="HandleActionCancel">Cancelar</button>
                </div>
            </EditForm>
        </div>
    </ContentContent>
    <ButtonTemplate> 
    </ButtonTemplate>
</Modal>

<Modal Actions="HandleAction" BootstrapClass="border-0" CustomStyle="width:350px" @bind-Open="Confirmacao">
    <ContentContent>
        <p>Tem certeza que deseja apagar o aluno ?</p>
    </ContentContent>
    <ButtonTemplate>
        <button class="btn btn-primary mx-2" value="salvar" @onclick="ConfirmarInativacao">Confirmar</button>
        <button class="btn btn-danger mx-2" value="cancelar" @onclick="FecharConfirmacao">Cancelar</button>
    </ButtonTemplate>
</Modal>

<h3 class="mb-2">Lista de Alunos</h3>

@if (alunos == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Usuário</th>
                <th>Operações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var aluno in alunos)
            {
                <tr>
                    <td>@aluno.Id</td>
                    <td>@aluno.Nome</td>
                    <td>@aluno.Usuario</td>
                    <td class="text-right">
                        <button class="btn btn-primary" @onclick="() => Editar(aluno.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => Inativar(aluno.Id)">Inativar</button>
                    </td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private AlunoMinDTO[]? alunos;

    [Parameter] public AlunoViewModel Aluno { get; set; } = new AlunoViewModel();

    public string[] ErrorMessages { get; set; }

    public bool IsOpen { get; set; }
    public bool Edicao { get; set; }

    public bool Confirmacao { get; set; }

    public void MostrarConfirmacao() => Confirmacao = true;
    public void FecharConfirmacao() => Confirmacao = false;

    private async void Editar(int id)
    {
        var aluno = await Http.GetFromJsonAsync<AlunoDTO>($"/api/alunos/{id}");

        Aluno.Id = aluno.Id;
        Aluno.Nome = aluno.Nome;
        Aluno.Usuario = aluno.Usuario;
        Aluno.Senha = string.Empty;

        Edicao = true;
        OpenModal();
        StateHasChanged();
    }

    private async void Inativar(int id)
    {
        Aluno.Id = id;
        MostrarConfirmacao();
    }

    private async void ConfirmarInativacao()
    {
        var response = await Http.DeleteAsync($"/api/alunos/{Aluno.Id}");

        if (await ResponseEhSucesso(response))
        {
            LimparModel();         
            await OnInitializedAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        alunos = await Http.GetFromJsonAsync<AlunoMinDTO[]>("/api/alunos");
    }

    private async Task CriarAluno()
    {
        var response = await Http.PostAsJsonAsync("/api/alunos", Aluno);

        if (await ResponseEhSucesso(response))
        {
            LimparModel();
            Edicao = false;
            CloseModal();
            await OnInitializedAsync();
        }
    }

    private async Task<bool> ResponseEhSucesso(HttpResponseMessage response)
    {
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadFromJsonAsync<ErrorViewModel>();

            ErrorMessages = error.errors.Messages.ToArray();

            StateHasChanged();

            return false;
        }

        return true;
    }

    private async Task EditarAluno()
    {
        var response = await Http.PutAsJsonAsync($"/api/alunos/{Aluno.Id}", Aluno);

        if (await ResponseEhSucesso(response))
        {
            LimparModel();
            Edicao = false; 
            CloseModal();
            await OnInitializedAsync();
        }
    }

    void OpenModal() => IsOpen = true;
    void CloseModal() => IsOpen = false;

    private void LimparModel()
    {
        Aluno = new AlunoViewModel();

        ErrorMessages = null;
    }

    private async Task HandleActionSave()
    {
        if (Edicao)
        {
            await EditarAluno();
        }
        else
        {
            await CriarAluno();
        }
    }

    private async Task HandleActionCancel()
    {
        LimparModel();
        Edicao = false;
        CloseModal();
    }

    private void HandleAction(){}
}
