@page "/relacionar-turmas"
@using ClassOrganizer.Web.ViewModels
@using ClassOrganizer.Application.DTO
@using NetcodeHub.Packages.Components.Modal
@inject HttpClient Http

<PageTitle>Relacionar Turmas</PageTitle>

<h1>Relacionar turmas</h1>

@if (turmaItems == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <div class="form-group mb-5" style="width: 400px">
        <label class="mb-2" for="itemDropdown">Selecione uma turma</label>
        <select id="itemDropdown" class="form-control" @onchange="CarregarTabela">
            <option value="0">Selecione...</option>
            @foreach (var item in turmaItems)
            {
                <option value="@item.Id">@item.NomeTurma</option>
            }
        </select>
    </div>
}

@if (TurmaId != default && alunos != default)
{
    <button class="btn btn-primary mt-2 mb-5" @onclick="OpenModal">Asociar aluno</button>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nome</th>
                <th>Usuário</th>
                <th>Operações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var aluno in alunos)
            {
                <tr>
                    <td>@aluno.Id</td>
                    <td>@aluno.Nome</td>
                    <td>@aluno.Usuario</td>
                    <td class="text-right">
                        <button class="btn btn-danger" @onclick="() => InativarRelacao(aluno.Id)">Inativar</button>
                    </td>
                    <td></td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal Actions="HandleAction" BootstrapClass="border-0" CustomStyle="width:425px" @bind-Open="IsOpen">
    <ContentContent>
        <div class="form-group mb-5" style="width: 400px">
            <label class="mb-2" for="itemDropdown">Selecione um aluno para associar</label>
            <select id="itemDropdown" class="form-control" @onchange="AssociarAluno">
                <option value="0">Selecione...</option>
                @foreach (var item in alunosComboBox)
                {
                    <option value="@item.Id">@item.Nome</option>
                }
            </select>
        </div>

        @if (ErrorMessages != null && ErrorMessages.Any())
        {
            <div class="alert alert-danger" role="alert">
                <ul>
                    @foreach (var error in ErrorMessages)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }

        <button class="btn btn-danger" @onclick="CloseModal">Cancelar</button>
    </ContentContent>
</Modal>

<Modal Actions="HandleAction" BootstrapClass="border-0" CustomStyle="width:350px" @bind-Open="Confirmacao">
    <ContentContent>
        <p>Tem certeza que deseja inativar a relação ?</p>
    </ContentContent>
    <ButtonTemplate>
        <button class="btn btn-primary mx-2" value="salvar" @onclick="ConfirmarInativacao">Confirmar</button>
        <button class="btn btn-danger mx-2" value="cancelar" @onclick="FecharConfirmacao">Cancelar</button>
    </ButtonTemplate>
</Modal>

@code {
    private List<TurmaComboBoxModel> turmaItems;
    private AlunoMinDTO[]? alunos;
    private List<AlunoComboBoxModel> alunosComboBox = new List<AlunoComboBoxModel>();
    private int TurmaId;
    private int AlunoId;
    public string[] ErrorMessages { get; set; }

    public bool IsOpen { get; set; }
    void OpenModal() => IsOpen = true;

    async Task CloseModal()
    {
        IsOpen = false;
        await RecarregarTabela();
    }

    public bool Confirmacao { get; set; }
    public void MostrarConfirmacao() => Confirmacao = true;
    public void FecharConfirmacao() => Confirmacao = false;

    protected override async Task OnInitializedAsync()
    {
        turmaItems = await Http.GetFromJsonAsync<List<TurmaComboBoxModel>>("/api/turmas");
        alunosComboBox = await Http.GetFromJsonAsync<List<AlunoComboBoxModel>>("/api/alunos");
    }

    private async Task CarregarTabela(ChangeEventArgs e)
    {
        TurmaId = int.Parse(e.Value.ToString());
        alunos = await Http.GetFromJsonAsync<AlunoMinDTO[]>($"/api/alunos-turmas/{TurmaId}");
    }

    private async Task RecarregarTabela()
    {
        ErrorMessages = null;
        AlunoId = default;
        alunosComboBox = new List<AlunoComboBoxModel>();
        alunos = await Http.GetFromJsonAsync<AlunoMinDTO[]>($"/api/alunos-turmas/{TurmaId}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task AssociarAluno(ChangeEventArgs e)
    {
        var alunoId = int.Parse(e.Value.ToString());

        var response = await Http.PostAsJsonAsync($"/api/alunos-turmas/", new { TurmaId, AlunoId = alunoId });

        if (await ResponseEhSucesso(response))
        {      
            CloseModal();
            StateHasChanged();
        }
    }

    private async Task InativarRelacao(int alunoId)
    {
        AlunoId = alunoId;
        MostrarConfirmacao();
    }

    private async Task ConfirmarInativacao()
    {
        var response = await Http.DeleteAsync($"/api/alunos-turmas/{AlunoId}/{TurmaId}");

        if (await ResponseEhSucesso(response))
        {
            await RecarregarTabela();
            StateHasChanged();
        }
    }

    private async Task<bool> ResponseEhSucesso(HttpResponseMessage response)
    {
        if (!response.IsSuccessStatusCode)
        {
            var error = await response.Content.ReadFromJsonAsync<ErrorViewModel>();

            ErrorMessages = error.errors.Messages.ToArray();

            return false;
        }

        return true;
    }

    private void HandleAction() { }
}
